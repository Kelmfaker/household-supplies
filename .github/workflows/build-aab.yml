name: Build TWA AAB

on:
  workflow_dispatch:
    inputs:
      app_url:
        description: 'Public HTTPS URL of the deployed app (manifest.json must be available)'
        required: true
      package_id:
        description: 'Android package id (e.g. com.yourcompany.households)'
        required: true
      app_name:
        description: 'Application name'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install global tools
        run: |
          npm install -g @bubblewrap/cli

      - name: Install Android command line tools
        run: |
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          curl -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools.zip -d latest
          sudo apt-get update
          sudo apt-get install -y unzip lib32stdc++6
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses || true
          sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;33.0.2"
        shell: bash

      - name: Create TWA project (Bubblewrap)
        shell: bash
        env:
          APP_URL: ${{ github.event.inputs.app_url }}
          PACKAGE_ID: ${{ github.event.inputs.package_id }}
          APP_NAME: ${{ github.event.inputs.app_name }}
        run: |
          set -e
          echo "Initializing TWA using Bubblewrap..."
          # Create a twa directory if missing. If it exists, we assume the project is already present.
          if [ -d twa ]; then
            echo "twa/ exists — skipping bubblewrap init"
          else
            bubblewrap init --manifest "$APP_URL/manifest.json" --packageId "$PACKAGE_ID" --applicationName "$APP_NAME" --no-interactive || true
            # move generated project to twa/ if present
            if [ -d "$PACKAGE_ID" ]; then
              mv "$PACKAGE_ID" twa || true
            fi
          fi

      - name: Ensure Gradle wrapper is executable
        if: always()
        run: |
          if [ -f twa/gradlew ]; then chmod +x twa/gradlew; fi

      - name: Provision keystore from secrets
        if: ${{ secrets.KEYSTORE_BASE64 != '' }}
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "Writing keystore to twa/my-release-key.jks"
          mkdir -p twa
          echo "$KEYSTORE_BASE64" | base64 --decode > twa/my-release-key.jks
          cat > twa/keystore.properties <<EOF
storeFile=my-release-key.jks
storePassword=$KEYSTORE_PASSWORD
keyAlias=$KEY_ALIAS
keyPassword=$KEY_PASSWORD
EOF

      - name: Build Android App Bundle (AAB)
        working-directory: twa
        run: |
          if [ ! -f gradlew ]; then echo "No Gradle project found in twa/ — please generate TWA project first and commit to repo or provide correct manifest"; exit 1; fi
          ./gradlew bundleRelease -x lint

      - name: Upload AAB artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-bundle
          path: |
            twa/**/outputs/**/*.aab

      - name: Upload to Google Play (optional)
        if: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON != '' }}
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ github.event.inputs.package_id }}
          releaseFile: 'twa/**/outputs/**/*.aab'
          track: 'internal'

      - name: Done
        run: echo "Build finished. Download the artifact from the workflow run artifacts."
